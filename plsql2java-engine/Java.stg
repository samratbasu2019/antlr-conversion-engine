group Java;

program(globals, classname, functions) ::= <<
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

public class <classname> {

private final static Logger log = Logger.getLogger(<classname>.class);
private SessionFactory sessionFactory;
@Autowired
public void setSessionFactory(SessionFactory sessionFactory){
	this.sessionFactory = sessionFactory;
}
<globals; separator="\n">

}

>>

variable(type,name,assign) ::= "<type> <name>;"


printer(state) ::= "log.debug <state>;"

sqler(v1,v2,v3) ::= <<
	Session session = sessionFactory.openSession();
	Query query = null;
	List resultSet = null;
	query = session.getNamedQuery('GET_<v3>');
	query.setString('XXXX', val);
	query.setString('YYYYY', stringVal);
	Transaction transaction = session.beginTransaction();	 
	try {
		resultSet = query.list();
		}
	catch(Exception ex) {
		e.printStackTrace();	
	}
	finally {
		 transaction.commit();
		 session.close();
	}
>>

sqlin(t1) ::= <<
		
		SessionFactory sessionFactory;
		Session session = sessionFactory.openSession();
		Transaction transaction = session.beginTransaction();	
		try {	
			session.save(<t1>);
			}
			catch(Exception ex) {
			e.printStackTrace();	
		}  finally {		
		transaction.commit();
			session.close();
			}
>>

sqlup(t1) ::= <<
		
		SessionFactory sessionFactory;
		Session session = sessionFactory.openSession();
		Transaction transaction = session.beginTransaction();	
		try{	
			session.save(<t1>);	
		}
			catch(Exception ex) {
			e.printStackTrace();	
		}  finally {
			transaction.commit();
			session.close();
			}
>>

assignme(var1,var2) ::= "<var1> = <var2>;"

conditionals(v4,v5,v6) ::= <<

if <v4> {
    <locals; separator="\n">
}
else
{
    <stats; separator="\n">

}

>>

conditionalelsif(v7,v8,v9) ::= <<
else if <v7> {
     <locals; separator="\n">
    <stats; separator="\n">
}
>>

type_int() ::= "BigDecimal"

type_string() ::= "String"

type_float() ::= "float"

type_type() ::= "Object"

refVar(id) ::= "<id>"

iconst(value) ::= "<value>"

abequals(left,right) ::= "<left> == <right>"

abless(left,right) ::= "<left> \< <right>"

abright(left,right) ::= "<left> \> <right>"

abplus(left,right) ::= " <left> + <right>"

giveassign(t1,t2) ::= "<t1>=<t2>;"

findloop(t1,t2) ::= <<

do {
    <locals; separator="\n">
}   while <t2>;

>>

wloop(t1,t2) ::= <<

while (<t2>) {
    <locals; separator="\n">
}

>>

floop(t1,t2,t3,t4) ::= <<

for(<t1> \< <t3> && <t1> \> <t2> ; <t1>++) {
    <locals; separator="\n">
  
}

>>

funccall(i,j) ::= "<i>=<j>();"

procall(j) ::= "<j>();"


commentId(t1) ::= <<
/*
* <t1>
*/
>>

procedure(t1,t2,t3,t4) ::= <<
    
        public static void <t1> <t2> {
           <t4>   
         <locals; separator="\n">
         
         
    } 

>>

function (t1,t2,t3,t4,t7) ::= <<
    
    <t2> <t1> <t7> {
    <t3>
         <locals; separator="\n">
                 
        return <t5>
    } 

>>